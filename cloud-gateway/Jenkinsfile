pipeline {
    agent any

    tools {
        maven 'mvn3'
    }

    environment {
        NEXUS_VERSION = "nexus3"
        NEXUS_PROTOCOL = "http"
        NEXUS_URL = "192.168.100.189:8081"
        NEXUS_REPOSITORY = "cloud-gateway-repo"
        NEXUS_CREDENTIALS_ID = "nexus-credentials"
    }

    stages {

        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Build') {
            steps {
                sh "mvn --batch-mode clean install"
            }
        }

        stage('Build Docker Image + Push') {
            steps {
                script {
                    dir ('cloud-gateway') {
                        def app = docker.build "localhost:5050/cloud-gateway:${env.version}"
                        app.push()
                    }
                }
            }
        }

        stage ('Run Docker Image') {
            steps {
                script {
                    docker.image("localhost:5000/cloud-gateway:${env.version}").run('-p 9191:9191 --name gateway --link service-registry')
                }
            }
        }

        stage('Nexus Repository') {
            steps {
                script {
                    pom = readMavenPom file : "pom.xml"
                    filesByGlob = findFiles(glob: "target/*.${pom.packaging}");
                    artifactPath = filesByGlob[0].path;
                    artifactExists = fileExists artifactPath;
                    if (artifactExists) {
                        echo "*** File: ${aritfactPath}, group: ${pom.groupId}, packaging: ${com.packaging}, version: ${pom.version}";
                        nexusArtifactUploader(
                            nexusVersion: NEXUS_VERSION,
                            protocol: NEXUS_PROTOCOL,
                            nexusUrl: NEXUS_URL,
                            groupId: pom.groupId,
                            version: pom.version,
                            repository: NEXUS_REPOSITORY,
                            credentialsId: NEXUS_CREDENTIALS_ID,
                            artifacts: [
                                [artifactId: pom.artifactId,
                                classifier: '',
                                file: artifactPath,
                                type: pom.packaging],
                                [artifactId: pom.artifactId,
                                classifier: '',
                                file: "pom.xml",
                                type: "pom"
                                ]
                            ]
                        );
                    } else {
                        error "File ${artifactPath} couldn't be found."
                    }
                }
            }
        }
    }
}